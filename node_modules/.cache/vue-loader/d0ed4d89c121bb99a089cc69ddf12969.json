{"remainingRequest":"/home/pankaj/Downloads/audio/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pankaj/Downloads/audio/src/components/AudioRecorder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/pankaj/Downloads/audio/src/components/AudioRecorder.vue","mtime":1568534036779},{"path":"/home/pankaj/Downloads/audio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pankaj/Downloads/audio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/pankaj/Downloads/audio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pankaj/Downloads/audio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Recorder from 'recorder-js'\n\nexport default {\n  name: 'audioRecorder',\n  components: {\n    Recorder\n  },\n  data () {\n    return {\n      audioContext: null,\n      recorder: null,\n      isRecording: false,\n      recordingData: [],\n      dataUrl: '',\n      blob: null,\n      audioChunks:null\n\n    }\n  },\n  mounted () {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)()\n\n    this.recorder = new Recorder(this.audioContext, {\n      // An array of 255 Numbers\n      // You can use this to visualize the audio stream\n      // If you use react, check out react-wave-stream\n      onAnalysed: data => ''\n    })\n\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => this.recorder.init(stream))\n      .catch(err => console.log('Uh oh... unable to get stream...', err))\n  },\n  methods: {\n    startRecording () {\n      console.log('recording...');\n      this.recorder.start()\n        .then(() => this.handleCallBack())\n    },\n    handleCallBack() {\n      this.isRecording = true\n      this.recorder.ondataavailable = e => {\n        this.audioChunks.push(e.data)\n        this.blob = new Blob(this.audioChunks)\n\n        //this.source = URL.createObjectURL(blob)\n        this.$nextTick(() => {\n          this.show = true\n        })\n      }\n    },\n    stopRecording () {\n      console.log('stopped....')\n      this.recorder.stop()\n        .then(({blob, buffer}) => {\n          this.blob = blob;\n\n          // buffer is an AudioBuffer\n        })\n    },\n    download() {\n      Recorder.download(this.blob, 'my-audio-file'); // downloads a .wav file\n    },\n    toggleRecording: function () {\n      var that = this\n      this.isRecording = !this.isRecording\n      if (this.isRecording) {\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n        navigator.getUserMedia({\n          audio: true,\n          video: false\n        }, function (stream) {\n          that.stream = stream\n          that.audioRecorder = new MediaRecorder(stream, {\n            mimeType: 'audio/wav',\n            audioBitsPerSecond: 96000\n          })\n          that.audioRecorder.start()\n          console.log('Media recorder started')\n          that.audioRecorder.ondataavailable = function (event) {\n            that.recordingData.push(event.data)\n          }\n        }, function (error) {\n          alert(JSON.stringify(error))\n        })\n      } else {\n        that.audioRecorder.stop()\n        that.audioRecorder.ondataavailable = function (event) {\n          that.recordingData.push(event.data)\n        }\n        that.audioRecorder.onstop = function (event) {\n          console.log('Media recorder stopped')\n          var blob = new Blob(that.recordingData, { type: 'audio/ogg' })\n          that.dataUrl = window.URL.createObjectURL(blob)\n        }\n      }\n\n    }\n    ,\n    togglePlay: function () {\n      var audioElement = document.getElementById('audio')\n      if (audioElement.paused === false) {\n        audioElement.pause()\n      } else {\n        audioElement.play()\n      }\n    }\n\n\n  }\n}\n",{"version":3,"sources":["AudioRecorder.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"AudioRecorder.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div id=\"controls\">\n      <button @click=\"startRecording\">Record</button>\n      <button id=\"pauseButton\" disabled>Pause</button>\n      <button id=\"stopButton\" @click=\"stopRecording\">Stop</button>\n      <button  @click=\"download\">Download</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Recorder from 'recorder-js'\n\nexport default {\n  name: 'audioRecorder',\n  components: {\n    Recorder\n  },\n  data () {\n    return {\n      audioContext: null,\n      recorder: null,\n      isRecording: false,\n      recordingData: [],\n      dataUrl: '',\n      blob: null,\n      audioChunks:null\n\n    }\n  },\n  mounted () {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)()\n\n    this.recorder = new Recorder(this.audioContext, {\n      // An array of 255 Numbers\n      // You can use this to visualize the audio stream\n      // If you use react, check out react-wave-stream\n      onAnalysed: data => ''\n    })\n\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => this.recorder.init(stream))\n      .catch(err => console.log('Uh oh... unable to get stream...', err))\n  },\n  methods: {\n    startRecording () {\n      console.log('recording...');\n      this.recorder.start()\n        .then(() => this.handleCallBack())\n    },\n    handleCallBack() {\n      this.isRecording = true\n      this.recorder.ondataavailable = e => {\n        this.audioChunks.push(e.data)\n        this.blob = new Blob(this.audioChunks)\n\n        //this.source = URL.createObjectURL(blob)\n        this.$nextTick(() => {\n          this.show = true\n        })\n      }\n    },\n    stopRecording () {\n      console.log('stopped....')\n      this.recorder.stop()\n        .then(({blob, buffer}) => {\n          this.blob = blob;\n\n          // buffer is an AudioBuffer\n        })\n    },\n    download() {\n      Recorder.download(this.blob, 'my-audio-file'); // downloads a .wav file\n    },\n    toggleRecording: function () {\n      var that = this\n      this.isRecording = !this.isRecording\n      if (this.isRecording) {\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n        navigator.getUserMedia({\n          audio: true,\n          video: false\n        }, function (stream) {\n          that.stream = stream\n          that.audioRecorder = new MediaRecorder(stream, {\n            mimeType: 'audio/wav',\n            audioBitsPerSecond: 96000\n          })\n          that.audioRecorder.start()\n          console.log('Media recorder started')\n          that.audioRecorder.ondataavailable = function (event) {\n            that.recordingData.push(event.data)\n          }\n        }, function (error) {\n          alert(JSON.stringify(error))\n        })\n      } else {\n        that.audioRecorder.stop()\n        that.audioRecorder.ondataavailable = function (event) {\n          that.recordingData.push(event.data)\n        }\n        that.audioRecorder.onstop = function (event) {\n          console.log('Media recorder stopped')\n          var blob = new Blob(that.recordingData, { type: 'audio/ogg' })\n          that.dataUrl = window.URL.createObjectURL(blob)\n        }\n      }\n\n    }\n    ,\n    togglePlay: function () {\n      var audioElement = document.getElementById('audio')\n      if (audioElement.paused === false) {\n        audioElement.pause()\n      } else {\n        audioElement.play()\n      }\n    }\n\n\n  }\n}\n</script>\n"]}]}