{"remainingRequest":"/home/pankaj/audio/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pankaj/audio/src/components/TrainVoice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/pankaj/audio/src/components/TrainVoice.vue","mtime":1568892707240},{"path":"/home/pankaj/audio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pankaj/audio/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pankaj/audio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/pankaj/audio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pankaj/audio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'trainVoice',\n  props: [ 'audioname', 'audiofullpath', 'users', 'meetingid' ],\n  data () {\n    return {\n      baseurl: null,\n      crop: false,\n      startTime: null,\n      endTime: null,\n      processing: false,\n      processingText: '',\n      recognizeProcessing: false,\n      audioPath: '',\n      form: {\n        attendee_id: '',\n        audio_name: '',\n        voice_list: []\n      }\n    }\n  },\n  mounted () {\n    this.baseurl = this.$parent.$attrs.baseurl;\n  },\n  methods: {\n    submit () {\n      this.processing = true\n      if (this.form.voice_list.length < 1) {\n        this.$snotify.error('You must crop at least once voice sample.!!', 'Error!!');\n\n        return '';\n      }\n      this.form.audio_name = this.audioname\n      this.processingText = 'Registering voice samples.....'\n      this.$http.post(this.baseurl + '/attendee-voice', this.form)\n        .then((result) => {\n          console.log(result)\n          this.processingText = 'Training the voice samples for the user.....'\n          this.$http.post(this.baseurl + '/train-attendee/' + this.form.attendee_id)\n            .then((result) => {\n              this.processing = false\n              this.reset();\n              this.$snotify.success('Voice samples registered and trained successfully!!', 'Success!!');\n\n            })\n            .catch(error => {\n              this.processing = false\n              this.$snotify.error('Something went wrong!!', 'Error');\n            })\n        })\n        .catch(error => {\n          this.processing = false\n          this.$snotify.error('Something went wrong!!', 'Error');\n        })\n    },\n    recognizeSpeakers () {\n      this.recognizeProcessing = true\n      this.$http.post(this.baseurl + '/recognize-speaker/' + this.meetingid)\n        .then((result) => {\n          this.recognizeProcessing = false;\n          this.$emit('voiceRecognized', result.data.data.recognized_speakers);\n\n          this.$snotify.success('Voices recognized successfully!!', 'Success!!');\n        })\n        .catch(error => {\n          this.recognizeProcessing = false\n          this.$snotify.error('Something went wrong!!', 'Error!!');\n        })\n    },\n    cropTime (event) {\n      let aud = document.getElementById('audio-player')\n      let currentTime = aud.currentTime\n      if (!this.crop) {\n        this.startTime = currentTime\n      } else {\n        this.endTime = currentTime\n        if (this.endTime - this.startTime < 1) {\n          this.$snotify.error('The time frame should be at least 1 second.!!', 'Error');\n\n          return ;\n        }\n        this.form.voice_list.push({\n          start: this.startTime,\n          end: this.endTime\n        })\n        this.startTime = null\n        this.endTime = null\n      }\n      this.crop = !this.crop\n    },\n    reset(){\n      this.form.attendee_id='';\n      this.form.voice_list = [];\n    },\n    removeVoice (key, voice) {\n      if (!confirm('Are you sure you want to delete?')) {\n        return\n      }\n      this.$delete(this.form.voice_list, key)\n\n      //this.checks = this.values.related_checks;\n    }\n  }\n}\n",{"version":3,"sources":["TrainVoice.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"TrainVoice.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <form id=\"voice-register-form\" style=\"text-align: left;\" @submit.prevent=\"submit\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"first_name\">User</label>\n            <select class=\"form-control\" v-model=\"form.attendee_id\" required>\n              <option value=\"\">Select User</option>\n              <option v-for=\"(name,id) in users\" :value=\"id\" v-text=\"name\"></option>\n            </select>\n            <!--            <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>-->\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <audio :src=\"audiofullpath\" id=\"audio-player\" controls style=\"width: 100% !important;\">\n            <!--            <source :src=\"audiofullpath\">-->\n          </audio>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n          <button type=\"button\"\n                  :class=\"crop ? 'btn btn-block btn-danger' :'btn btn-block btn-success'\"\n                  @click=\"cropTime\"\n                  v-text=\"crop ? 'Stop Cropping' : 'Start Cropping'\"></button>\n        </div>\n        <div class=\"col-md-1\"></div>\n        <div class=\"col-md-2\">\n          <button type=\"button\" @click=\"reset\" class=\"btn btn-danger\">Reset</button>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n          <hr>\n          <table class=\"table table-striped\">\n            <tr>\n              <th>Start Time</th>\n              <th>End Time</th>\n              <th>Action</th>\n            </tr>\n            <tr v-for=\"(voice, key) in form.voice_list\">\n              <td v-text=\"voice.start\"></td>\n              <td v-text=\"voice.end\"></td>\n              <td>\n                <a href=\"javascript:void(0)\"\n                   class=\"btn btn-sm btn-outline-danger\"\n                   @click=\"removeVoice(key, voice)\">\n                  Remove\n                </a>\n              </td>\n            </tr>\n          </table>\n        </div>\n      </div>\n      <hr>\n      <!--      <div class=\"form-check\">-->\n      <!--        <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\">-->\n      <!--        <label class=\"form-check-label\" for=\"exampleCheck1\">Check me out</label>-->\n      <!--      </div>-->\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <button type=\"submit\" class=\"btn btn-block btn-outline-primary\"\n                  :disabled=\"processing\"\n                  v-text=\"processing ? processingText : 'Submit'\"></button>\n        </div>\n      </div>\n    </form>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr>\n        <button type=\"button\" class=\"btn btn-block btn-dark\" @click=\"recognizeSpeakers\"\n                :disabled=\"recognizeProcessing\"\n                v-text=\"recognizeProcessing ? 'Recognizing Voices.....' : 'Recognize Voices'\"></button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'trainVoice',\n  props: [ 'audioname', 'audiofullpath', 'users', 'meetingid' ],\n  data () {\n    return {\n      baseurl: null,\n      crop: false,\n      startTime: null,\n      endTime: null,\n      processing: false,\n      processingText: '',\n      recognizeProcessing: false,\n      audioPath: '',\n      form: {\n        attendee_id: '',\n        audio_name: '',\n        voice_list: []\n      }\n    }\n  },\n  mounted () {\n    this.baseurl = this.$parent.$attrs.baseurl;\n  },\n  methods: {\n    submit () {\n      this.processing = true\n      if (this.form.voice_list.length < 1) {\n        this.$snotify.error('You must crop at least once voice sample.!!', 'Error!!');\n\n        return '';\n      }\n      this.form.audio_name = this.audioname\n      this.processingText = 'Registering voice samples.....'\n      this.$http.post(this.baseurl + '/attendee-voice', this.form)\n        .then((result) => {\n          console.log(result)\n          this.processingText = 'Training the voice samples for the user.....'\n          this.$http.post(this.baseurl + '/train-attendee/' + this.form.attendee_id)\n            .then((result) => {\n              this.processing = false\n              this.reset();\n              this.$snotify.success('Voice samples registered and trained successfully!!', 'Success!!');\n\n            })\n            .catch(error => {\n              this.processing = false\n              this.$snotify.error('Something went wrong!!', 'Error');\n            })\n        })\n        .catch(error => {\n          this.processing = false\n          this.$snotify.error('Something went wrong!!', 'Error');\n        })\n    },\n    recognizeSpeakers () {\n      this.recognizeProcessing = true\n      this.$http.post(this.baseurl + '/recognize-speaker/' + this.meetingid)\n        .then((result) => {\n          this.recognizeProcessing = false;\n          this.$emit('voiceRecognized', result.data.data.recognized_speakers);\n\n          this.$snotify.success('Voices recognized successfully!!', 'Success!!');\n        })\n        .catch(error => {\n          this.recognizeProcessing = false\n          this.$snotify.error('Something went wrong!!', 'Error!!');\n        })\n    },\n    cropTime (event) {\n      let aud = document.getElementById('audio-player')\n      let currentTime = aud.currentTime\n      if (!this.crop) {\n        this.startTime = currentTime\n      } else {\n        this.endTime = currentTime\n        if (this.endTime - this.startTime < 1) {\n          this.$snotify.error('The time frame should be at least 1 second.!!', 'Error');\n\n          return ;\n        }\n        this.form.voice_list.push({\n          start: this.startTime,\n          end: this.endTime\n        })\n        this.startTime = null\n        this.endTime = null\n      }\n      this.crop = !this.crop\n    },\n    reset(){\n      this.form.attendee_id='';\n      this.form.voice_list = [];\n    },\n    removeVoice (key, voice) {\n      if (!confirm('Are you sure you want to delete?')) {\n        return\n      }\n      this.$delete(this.form.voice_list, key)\n\n      //this.checks = this.values.related_checks;\n    }\n  }\n}\n</script>"]}]}