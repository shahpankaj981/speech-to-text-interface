{"remainingRequest":"/home/pankaj/Downloads/audio/node_modules/babel-loader/lib/index.js!/home/pankaj/Downloads/audio/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/pankaj/Downloads/audio/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pankaj/Downloads/audio/src/components/AudioRecorder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/pankaj/Downloads/audio/src/components/AudioRecorder.vue","mtime":1568534036779},{"path":"/home/pankaj/Downloads/audio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pankaj/Downloads/audio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/pankaj/Downloads/audio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pankaj/Downloads/audio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Recorder from 'recorder-js';\nexport default {\n  name: 'audioRecorder',\n  components: {\n    Recorder: Recorder\n  },\n  data: function data() {\n    return {\n      audioContext: null,\n      recorder: null,\n      isRecording: false,\n      recordingData: [],\n      dataUrl: '',\n      blob: null,\n      audioChunks: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.recorder = new Recorder(this.audioContext, {\n      // An array of 255 Numbers\n      // You can use this to visualize the audio stream\n      // If you use react, check out react-wave-stream\n      onAnalysed: function onAnalysed(data) {\n        return '';\n      }\n    });\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(function (stream) {\n      return _this.recorder.init(stream);\n    }).catch(function (err) {\n      return console.log('Uh oh... unable to get stream...', err);\n    });\n  },\n  methods: {\n    startRecording: function startRecording() {\n      var _this2 = this;\n\n      console.log('recording...');\n      this.recorder.start().then(function () {\n        return _this2.handleCallBack();\n      });\n    },\n    handleCallBack: function handleCallBack() {\n      var _this3 = this;\n\n      this.isRecording = true;\n\n      this.recorder.ondataavailable = function (e) {\n        _this3.audioChunks.push(e.data);\n\n        _this3.blob = new Blob(_this3.audioChunks); //this.source = URL.createObjectURL(blob)\n\n        _this3.$nextTick(function () {\n          _this3.show = true;\n        });\n      };\n    },\n    stopRecording: function stopRecording() {\n      var _this4 = this;\n\n      console.log('stopped....');\n      this.recorder.stop().then(function (_ref) {\n        var blob = _ref.blob,\n            buffer = _ref.buffer;\n        _this4.blob = blob; // buffer is an AudioBuffer\n      });\n    },\n    download: function download() {\n      Recorder.download(this.blob, 'my-audio-file'); // downloads a .wav file\n    },\n    toggleRecording: function toggleRecording() {\n      var that = this;\n      this.isRecording = !this.isRecording;\n\n      if (this.isRecording) {\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        navigator.getUserMedia({\n          audio: true,\n          video: false\n        }, function (stream) {\n          that.stream = stream;\n          that.audioRecorder = new MediaRecorder(stream, {\n            mimeType: 'audio/wav',\n            audioBitsPerSecond: 96000\n          });\n          that.audioRecorder.start();\n          console.log('Media recorder started');\n\n          that.audioRecorder.ondataavailable = function (event) {\n            that.recordingData.push(event.data);\n          };\n        }, function (error) {\n          alert(JSON.stringify(error));\n        });\n      } else {\n        that.audioRecorder.stop();\n\n        that.audioRecorder.ondataavailable = function (event) {\n          that.recordingData.push(event.data);\n        };\n\n        that.audioRecorder.onstop = function (event) {\n          console.log('Media recorder stopped');\n          var blob = new Blob(that.recordingData, {\n            type: 'audio/ogg'\n          });\n          that.dataUrl = window.URL.createObjectURL(blob);\n        };\n      }\n    },\n    togglePlay: function togglePlay() {\n      var audioElement = document.getElementById('audio');\n\n      if (audioElement.paused === false) {\n        audioElement.pause();\n      } else {\n        audioElement.play();\n      }\n    }\n  }\n};",{"version":3,"sources":["AudioRecorder.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div id=\"controls\">\n      <button @click=\"startRecording\">Record</button>\n      <button id=\"pauseButton\" disabled>Pause</button>\n      <button id=\"stopButton\" @click=\"stopRecording\">Stop</button>\n      <button  @click=\"download\">Download</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Recorder from 'recorder-js'\n\nexport default {\n  name: 'audioRecorder',\n  components: {\n    Recorder\n  },\n  data () {\n    return {\n      audioContext: null,\n      recorder: null,\n      isRecording: false,\n      recordingData: [],\n      dataUrl: '',\n      blob: null,\n      audioChunks:null\n\n    }\n  },\n  mounted () {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)()\n\n    this.recorder = new Recorder(this.audioContext, {\n      // An array of 255 Numbers\n      // You can use this to visualize the audio stream\n      // If you use react, check out react-wave-stream\n      onAnalysed: data => ''\n    })\n\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => this.recorder.init(stream))\n      .catch(err => console.log('Uh oh... unable to get stream...', err))\n  },\n  methods: {\n    startRecording () {\n      console.log('recording...');\n      this.recorder.start()\n        .then(() => this.handleCallBack())\n    },\n    handleCallBack() {\n      this.isRecording = true\n      this.recorder.ondataavailable = e => {\n        this.audioChunks.push(e.data)\n        this.blob = new Blob(this.audioChunks)\n\n        //this.source = URL.createObjectURL(blob)\n        this.$nextTick(() => {\n          this.show = true\n        })\n      }\n    },\n    stopRecording () {\n      console.log('stopped....')\n      this.recorder.stop()\n        .then(({blob, buffer}) => {\n          this.blob = blob;\n\n          // buffer is an AudioBuffer\n        })\n    },\n    download() {\n      Recorder.download(this.blob, 'my-audio-file'); // downloads a .wav file\n    },\n    toggleRecording: function () {\n      var that = this\n      this.isRecording = !this.isRecording\n      if (this.isRecording) {\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n        navigator.getUserMedia({\n          audio: true,\n          video: false\n        }, function (stream) {\n          that.stream = stream\n          that.audioRecorder = new MediaRecorder(stream, {\n            mimeType: 'audio/wav',\n            audioBitsPerSecond: 96000\n          })\n          that.audioRecorder.start()\n          console.log('Media recorder started')\n          that.audioRecorder.ondataavailable = function (event) {\n            that.recordingData.push(event.data)\n          }\n        }, function (error) {\n          alert(JSON.stringify(error))\n        })\n      } else {\n        that.audioRecorder.stop()\n        that.audioRecorder.ondataavailable = function (event) {\n          that.recordingData.push(event.data)\n        }\n        that.audioRecorder.onstop = function (event) {\n          console.log('Media recorder stopped')\n          var blob = new Blob(that.recordingData, { type: 'audio/ogg' })\n          that.dataUrl = window.URL.createObjectURL(blob)\n        }\n      }\n\n    }\n    ,\n    togglePlay: function () {\n      var audioElement = document.getElementById('audio')\n      if (audioElement.paused === false) {\n        audioElement.pause()\n      } else {\n        audioElement.play()\n      }\n    }\n\n\n  }\n}\n</script>\n"],"sourceRoot":"src/components"}]}